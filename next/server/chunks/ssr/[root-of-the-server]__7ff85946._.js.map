{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/calculate-profit-margin.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Flow for calculating profit margins by comparing wholesale and online retail prices.\n *\n * - calculateProfitMargin - Function to calculate profit margins.\n * - CalculateProfitMarginInput - Input type for the calculateProfitMargin function.\n * - CalculateProfitMarginOutput - Output type for the calculateProfitMargin function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CalculateProfitMarginInputSchema = z.object({\n  wholesalePrice: z.number().describe('The price of the product at wholesale.'),\n  retailPrice: z.number().describe('The price of the product at online retail.'),\n  productName: z.string().describe('The name of the product.'),\n  wholesaleSource: z.string().describe('The source of the wholesale price (e.g., shop name or receipt ID).'),\n  retailSource: z.string().describe('The online retailer (e.g., Amazon, Flipkart).'),\n});\n\nexport type CalculateProfitMarginInput = z.infer<typeof CalculateProfitMarginInputSchema>;\n\nconst CalculateProfitMarginOutputSchema = z.object({\n  profitMargin: z.number().describe('The calculated profit margin as a percentage.'),\n  profitAmount: z.number().describe('The calculated profit amount.'),\n  isProfitable: z.boolean().describe('Whether the product is profitable based on the given prices.'),\n  analysis: z.string().describe('An analysis of the profit margin, including potential risks and opportunities.'),\n});\n\nexport type CalculateProfitMarginOutput = z.infer<typeof CalculateProfitMarginOutputSchema>;\n\nexport async function calculateProfitMargin(input: CalculateProfitMarginInput): Promise<CalculateProfitMarginOutput> {\n  return calculateProfitMarginFlow(input);\n}\n\nconst calculateProfitMarginPrompt = ai.definePrompt({\n  name: 'calculateProfitMarginPrompt',\n  input: {schema: CalculateProfitMarginInputSchema},\n  output: {schema: CalculateProfitMarginOutputSchema},\n  prompt: `You are an expert in financial analysis, specializing in profit margin calculation for e-commerce and wholesale businesses.\n\n  Given the following information, calculate the profit margin, profit amount, and determine if the product is profitable. Also, provide a brief analysis of the profit margin, including potential risks and opportunities.\n\n  Product Name: {{{productName}}}\n  Wholesale Price: {{{wholesalePrice}}}\n  Retail Price: {{{retailPrice}}}\n  Wholesale Source: {{{wholesaleSource}}}\n  Retail Source: {{{retailSource}}}\n\n  Consider factors such as market trends, competition, and potential costs (e.g., shipping, fees) in your analysis.\n\n  Ensure that the profitMargin is a percentage value, and isProfitable is a boolean value based on whether the profitMargin is positive.\n  `,\n});\n\nconst calculateProfitMarginFlow = ai.defineFlow(\n  {\n    name: 'calculateProfitMarginFlow',\n    inputSchema: CalculateProfitMarginInputSchema,\n    outputSchema: CalculateProfitMarginOutputSchema,\n  },\n  async input => {\n    const {output} = await calculateProfitMarginPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACnC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAIO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;IACnD,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/compare-prices.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow for comparing product prices across different platforms.\n * \n * - comparePrices - A function that compares prices.\n * - ComparePricesInput - The input type for the comparePrices function.\n * - ComparePricesOutput - The return type for the comparePrices function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst ProductPriceDetailSchema = z.object({\n  productName: z.string().describe(\"The specific name of the product variant (e.g., 'Aashirvaad Select Sharbati Atta, 5kg').\"),\n  platform: z.string().describe('The platform where the product is sold (e.g., Amazon, Flipkart, Local Wholesale).'),\n  priceRange: z.string().describe('The estimated price range for the product on the platform in Indian Rupees (e.g., ₹270-₹290).'),\n  deliveryTime: z.string().describe('The estimated delivery time (e.g., 1-2 days, pickup only).'),\n  imageUrl: z.string().url().describe('A placeholder image URL for the product.'),\n  rating: z.number().min(1).max(5).describe('The average customer rating out of 5.'),\n  reviewSummary: z.string().describe('A brief summary of customer reviews.'),\n});\n\nconst FrequentlyBoughtTogetherSchema = z.object({\n    productName: z.string().describe('The name of the suggested product.'),\n    price: z.string().describe('The estimated price of the suggested product in Indian Rupees.'),\n    imageUrl: z.string().url().describe('A placeholder image URL for the product.'),\n});\n\n\nconst ComparePricesInputSchema = z.object({\n  productName: z.string().describe('The name of the product to search for.'),\n});\n\nconst ComparePricesOutputSchema = z.object({\n  searchedProductName: z.string().describe('The general product category that was searched (e.g., \"organic wheat flour\").'),\n  products: z.array(ProductPriceDetailSchema).describe('A list of different product variants and their prices from various platforms.'),\n  bestDeal: z.object({\n    productName: z.string(),\n    platform: z.string(),\n    price: z.string(),\n    reason: z.string().describe('A brief reason why this is the best deal (e.g., lowest price, fastest delivery).'),\n  }).describe('The best deal found among the products.'),\n  frequentlyBoughtTogether: z.array(FrequentlyBoughtTogetherSchema).describe('A list of 2-3 products that are frequently bought together with the searched item.'),\n});\n\nexport type ComparePricesInput = z.infer<typeof ComparePricesInputSchema>;\nexport type ComparePricesOutput = z.infer<typeof ComparePricesOutputSchema>;\n\n\nexport async function comparePrices(input: ComparePricesInput): Promise<ComparePricesOutput> {\n  return await comparePricesFlow(input);\n}\n\nconst comparePricesPrompt = ai.definePrompt({\n  name: 'comparePricesPrompt',\n  input: { schema: ComparePricesInputSchema },\n  output: { schema: ComparePricesOutputSchema },\n  prompt: `You are a price comparison engine for BharatAI Bazaar, an Indian marketplace. Your task is to find and compare prices for a given product across Amazon, Flipkart, and a local wholesale market.\n\n  Product: {{{productName}}}\n\n  Please provide the following:\n  1. A list of at least 3-4 different popular product variants for the given search query.\n  2. For each product variant, provide details for Amazon, Flipkart, and \"Local Wholesale\".\n  3. For each item, include:\n      - The specific product name.\n      - A realistic price *range* in Indian Rupees (₹).\n      - A realistic estimated delivery time.\n      - A customer rating between 1 and 5.\n      - A short, one-sentence review summary.\n      - A placeholder image URL from https://picsum.photos/200/200.\n  4. Identify the best deal overall from all the options and provide a brief justification.\n  5. Suggest 2-3 items that are 'frequently bought together' with the user's searched product. For each suggested item, provide its name, an estimated price, and a placeholder image URL.\n\n  Generate realistic but fictional data. Ensure the product names are relevant to the search query. The output should be structured according to the provided schema. Set the 'searchedProductName' to the original user query.\n  `,\n});\n\n\nconst comparePricesFlow = ai.defineFlow(\n  {\n    name: 'comparePricesFlow',\n    inputSchema: ComparePricesInputSchema,\n    outputSchema: ComparePricesOutputSchema,\n  },\n  async (input) => {\n    const { output } = await comparePricesPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;IACpC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IAC1C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;AACxC;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACjB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM;QACrB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;QAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;QACf,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,GAAG,QAAQ,CAAC;IACZ,0BAA0B,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gCAAgC,QAAQ,CAAC;AAC7E;AAMO,eAAe,cAAc,KAAyB;IAC3D,OAAO,MAAM,kBAAkB;AACjC;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC1C,MAAM;IACN,OAAO;QAAE,QAAQ;IAAyB;IAC1C,QAAQ;QAAE,QAAQ;IAA0B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;EAkBT,CAAC;AACH;AAGA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,oBAAoB;IAC7C,OAAO;AACT;;;IAvCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/types.ts"],"sourcesContent":["import type { CalculateProfitMarginInput as CaclulateInput, CalculateProfitMarginOutput } from '@/ai/flows/calculate-profit-margin';\nimport type { ComparePricesInput as PriceInput, ComparePricesOutput as PriceOutput } from '@/ai/flows/compare-prices';\nimport { z } from 'zod';\n\n\nexport type Calculation = CaclulateInput & CalculateProfitMarginOutput & {\n  id: string;\n  createdAt: string;\n};\n\n\nexport const profitMarginInputSchema = z.object({\n  productName: z.string().min(1, \"Product name is required.\"),\n  wholesalePrice: z.coerce.number({invalid_type_error: \"Must be a number\"}).min(0, \"Wholesale price must be a positive number.\"),\n  retailPrice: z.coerce.number({invalid_type_error: \"Must be a number\"}).min(0, \"Retail price must be a positive number.\"),\n  wholesaleSource: z.string().min(1, \"Wholesale source is required.\"),\n  retailSource: z.string().min(1, \"Retail source is required.\"),\n});\n\nexport type CalculateProfitMarginInput = z.infer<typeof profitMarginInputSchema>;\nexport type ProfitMarginServerInput = z.input<typeof profitMarginInputSchema>;\n\n\nconst HistoryMessageSchema = z.object({\n  role: z.enum(['user', 'bot']),\n  content: z.string(),\n});\n\nexport const ChatInputSchema = z.object({\n  history: z.array(HistoryMessageSchema).describe('The conversation history.'),\n  message: z.string().describe('The latest user message.'),\n});\n\nexport type ChatInput = z.infer<typeof ChatInputSchema>;\nexport type ChatServerInput = z.input<typeof ChatInputSchema>\n\nexport const ChatOutputSchema = z.string().describe('The chatbot response.');\nexport type ChatOutput = z.infer<typeof ChatOutputSchema>;\n\n\nexport const comparePricesInputSchema = z.object({\n    productName: z.string().min(1, \"Product name is required.\"),\n});\n\nexport type ComparePricesInput = z.infer<typeof comparePricesInputSchema>;\nexport type { ComparePricesOutput } from '@/ai/flows/compare-prices';\n"],"names":[],"mappings":";;;;;;AAEA;;AASO,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAAC,oBAAoB;IAAkB,GAAG,GAAG,CAAC,GAAG;IACjF,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAAC,oBAAoB;IAAkB,GAAG,GAAG,CAAC,GAAG;IAC9E,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACnC,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAClC;AAMA,MAAM,uBAAuB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAM;IAC5B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEO,MAAM,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ,CAAC;IAChD,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAKO,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAI7C,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AACnC","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/chat.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A simple chatbot flow that responds to user queries.\n * \n * - chat - A function that handles the chat conversation.\n */\n\nimport { ai } from '@/ai/genkit';\nimport type { ChatInput, ChatOutput } from \"@/lib/types\";\nimport { ChatInputSchema, ChatOutputSchema } from '@/lib/types';\n\n\nexport async function chat(input: ChatInput): Promise<ChatOutput> {\n  return await chatFlow(input);\n}\n\nconst chatPrompt = ai.definePrompt(\n  {\n    name: 'chatPrompt',\n    input: { schema: ChatInputSchema },\n    output: { schema: ChatOutputSchema },\n    prompt: `You are BharatAI Bazaar, an AI marketplace copilot for India. Your job is to help buyers find the best deals and sellers grow smarter. Be concise, professional, and helpful.\n\n    Current Conversation:\n    {{#each history}}\n      {{#if (eq role 'user')}}\n        User: {{content}}\n      {{/if}}\n      {{#if (eq role 'bot')}}\n        Assistant: {{content}}\n      {{/if}}\n    {{/each}}\n\n    User: {{{message}}}\n    Assistant:`,\n  },\n);\n\nconst chatFlow = ai.defineFlow(\n  {\n    name: 'chatFlow',\n    inputSchema: ChatInputSchema,\n    outputSchema: ChatOutputSchema,\n  },\n  async (input) => {\n    const { output } = await chatPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AAEA;;;;;;AAGO,eAAe,KAAK,KAAgB;IACzC,OAAO,MAAM,SAAS;AACxB;AAEA,MAAM,aAAa,mHAAA,CAAA,KAAE,CAAC,YAAY,CAChC;IACE,MAAM;IACN,OAAO;QAAE,QAAQ,mHAAA,CAAA,kBAAe;IAAC;IACjC,QAAQ;QAAE,QAAQ,mHAAA,CAAA,mBAAgB;IAAC;IACnC,QAAQ,CAAC;;;;;;;;;;;;;cAaC,CAAC;AACb;AAGF,MAAM,WAAW,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5B;IACE,MAAM;IACN,aAAa,mHAAA,CAAA,kBAAe;IAC5B,cAAc,mHAAA,CAAA,mBAAgB;AAChC,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,WAAW;IACpC,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { calculateProfitMargin } from \"@/ai/flows/calculate-profit-margin\";\nimport { comparePrices } from \"@/ai/flows/compare-prices\";\nimport type { CalculateProfitMarginInput, ComparePricesInput, ProfitMarginServerInput } from \"@/lib/types\";\nimport { chat } from \"@/ai/flows/chat\";\nimport type { ChatInput, ChatServerInput } from \"@/lib/types\";\n\nexport async function getProfitMargin(values: CalculateProfitMarginInput) {\n\n  try {\n    const result = await calculateProfitMargin(values);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"AI flow failed:\", error);\n    return { error: \"Failed to calculate profit margin. Please try again.\" };\n  }\n}\n\nexport async function getChatResponse(history: ChatInput['history'], message: string) {\n    try {\n        const response = await chat({ history, message });\n        return { response };\n    } catch (error) {\n        console.error(\"Chat flow failed:\", error);\n        return { error: \"Failed to get response from the assistant.\" };\n    }\n}\n\nexport async function getPriceComparison(values: ComparePricesInput) {\n  try {\n    const result = await comparePrices(values);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Price comparison flow failed:\", error);\n    return { error: \"Failed to compare prices. Please try again.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AAEA;;;;;;;AAGO,eAAe,gBAAgB,MAAkC;IAEtE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3C,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO;YAAE,OAAO;QAAuD;IACzE;AACF;AAEO,eAAe,gBAAgB,OAA6B,EAAE,OAAe;IAChF,IAAI;QACA,MAAM,WAAW,MAAM,CAAA,GAAA,0HAAA,CAAA,OAAI,AAAD,EAAE;YAAE;YAAS;QAAQ;QAC/C,OAAO;YAAE;QAAS;IACtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO;YAAE,OAAO;QAA6C;IACjE;AACJ;AAEO,eAAe,mBAAmB,MAA0B;IACjE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,gBAAa,AAAD,EAAE;QACnC,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,OAAO;QAA8C;IAChE;AACF;;;IA7BsB;IAWA;IAUA;;AArBA,+OAAA;AAWA,+OAAA;AAUA,+OAAA","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getChatResponse as '6053187d99484768228bcb7dab7a913a7068ffc7b6'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}