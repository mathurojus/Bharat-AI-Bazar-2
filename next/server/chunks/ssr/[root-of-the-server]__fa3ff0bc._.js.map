{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/calculate-profit-margin.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Flow for calculating profit margins by comparing wholesale and online retail prices.\n *\n * - calculateProfitMargin - Function to calculate profit margins.\n * - CalculateProfitMarginInput - Input type for the calculateProfitMargin function.\n * - CalculateProfitMarginOutput - Output type for the calculateProfitMargin function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CalculateProfitMarginInputSchema = z.object({\n  wholesalePrice: z.number().describe('The price of the product at wholesale.'),\n  retailPrice: z.number().describe('The price of the product at online retail.'),\n  productName: z.string().describe('The name of the product.'),\n  wholesaleSource: z.string().describe('The source of the wholesale price (e.g., shop name or receipt ID).'),\n  retailSource: z.string().describe('The online retailer (e.g., Amazon, Flipkart).'),\n});\n\nexport type CalculateProfitMarginInput = z.infer<typeof CalculateProfitMarginInputSchema>;\n\nconst CalculateProfitMarginOutputSchema = z.object({\n  profitMargin: z.number().describe('The calculated profit margin as a percentage.'),\n  profitAmount: z.number().describe('The calculated profit amount.'),\n  isProfitable: z.boolean().describe('Whether the product is profitable based on the given prices.'),\n  analysis: z.string().describe('An analysis of the profit margin, including potential risks and opportunities.'),\n});\n\nexport type CalculateProfitMarginOutput = z.infer<typeof CalculateProfitMarginOutputSchema>;\n\nexport async function calculateProfitMargin(input: CalculateProfitMarginInput): Promise<CalculateProfitMarginOutput> {\n  return calculateProfitMarginFlow(input);\n}\n\nconst calculateProfitMarginPrompt = ai.definePrompt({\n  name: 'calculateProfitMarginPrompt',\n  input: {schema: CalculateProfitMarginInputSchema},\n  output: {schema: CalculateProfitMarginOutputSchema},\n  prompt: `You are an expert in financial analysis, specializing in profit margin calculation for e-commerce and wholesale businesses.\n\n  Given the following information, calculate the profit margin, profit amount, and determine if the product is profitable. Also, provide a brief analysis of the profit margin, including potential risks and opportunities.\n\n  Product Name: {{{productName}}}\n  Wholesale Price: {{{wholesalePrice}}}\n  Retail Price: {{{retailPrice}}}\n  Wholesale Source: {{{wholesaleSource}}}\n  Retail Source: {{{retailSource}}}\n\n  Consider factors such as market trends, competition, and potential costs (e.g., shipping, fees) in your analysis.\n\n  Ensure that the profitMargin is a percentage value, and isProfitable is a boolean value based on whether the profitMargin is positive.\n  `,\n});\n\nconst calculateProfitMarginFlow = ai.defineFlow(\n  {\n    name: 'calculateProfitMarginFlow',\n    inputSchema: CalculateProfitMarginInputSchema,\n    outputSchema: CalculateProfitMarginOutputSchema,\n  },\n  async input => {\n    const {output} = await calculateProfitMarginPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACnC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAIO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;IACnD,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { calculateProfitMargin } from \"@/ai/flows/calculate-profit-margin\";\nimport type { CalculateProfitMarginInput } from \"@/ai/flows/calculate-profit-margin\";\n\nconst inputSchema = z.object({\n  productName: z.string().min(1, \"Product name is required.\"),\n  wholesalePrice: z.coerce.number({invalid_type_error: \"Must be a number\"}).min(0, \"Wholesale price must be a positive number.\"),\n  retailPrice: z.coerce.number({invalid_type_error: \"Must be a number\"}).min(0, \"Retail price must be a positive number.\"),\n  wholesaleSource: z.string().min(1, \"Wholesale source is required.\"),\n  retailSource: z.string().min(1, \"Retail source is required.\"),\n});\n\nexport async function getProfitMargin(values: CalculateProfitMarginInput) {\n  const validatedInput = inputSchema.safeParse(values);\n  if (!validatedInput.success) {\n    return { error: \"Invalid input.\", details: validatedInput.error.flatten() };\n  }\n\n  try {\n    const result = await calculateProfitMargin(validatedInput.data);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"AI flow failed:\", error);\n    return { error: \"Failed to calculate profit margin. Please try again.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAGA,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAAC,oBAAoB;IAAkB,GAAG,GAAG,CAAC,GAAG;IACjF,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAAC,oBAAoB;IAAkB,GAAG,GAAG,CAAC,GAAG;IAC9E,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACnC,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAClC;AAEO,eAAe,gBAAgB,MAAkC;IACtE,MAAM,iBAAiB,YAAY,SAAS,CAAC;IAC7C,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,OAAO;YAAE,OAAO;YAAkB,SAAS,eAAe,KAAK,CAAC,OAAO;QAAG;IAC5E;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE,eAAe,IAAI;QAC9D,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO;YAAE,OAAO;QAAuD;IACzE;AACF;;;IAbsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getProfitMargin as '40032eacf47a1e50e181f8295fac1d09c8b76dcb00'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}